name: Build and deploy Aseprite

on:
  workflow_dispatch:
    inputs:
      force:
        description: "Force build even if cached"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]
  schedule:
    - cron: '0 0 * * *' # 每天 00:00 UTC
  push:
    branches:
      - master
      - fix

permissions:
  contents: write  # 允许创建/更新 Release

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      source_url: ${{ steps.version_info.outputs.source_url }}
      version_body: ${{ steps.version_info.outputs.version_body }}
      should_build: ${{ steps.decide.outputs.should_build }}
      skip_reason: ${{ steps.decide.outputs.skip_reason }}
    steps:
      - name: Get latest version info
        id: version_info
        shell: bash
        run: |
          set -euo pipefail
          data="$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)"
          LATEST_TAG="$(echo "$data" | jq -r '.tag_name')"
          SOURCE_URL="$(echo "$data" | jq -r '.zipball_url')"  # 只取源码 zip
          VERSION_BODY="$(echo "$data" | jq -r '.body')"

          echo "${LATEST_TAG}" > "${LATEST_TAG}.txt"

          {
            echo "latest_tag=${LATEST_TAG}"
            echo "source_url=${SOURCE_URL}"
            echo "version_body<<EOF"
            echo "${VERSION_BODY}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Load version cache
        id: version_cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.version_info.outputs.latest_tag }}.txt
          key: cached_version-${{ steps.version_info.outputs.latest_tag }}

      # 统一“是否构建”的决策，并产出可读的原因
      - name: Decide whether to build
        id: decide
        shell: bash
        run: |
          set -euo pipefail
          SHOULD="false"
          REASON=""

          FORCE="${{ github.event_name == 'workflow_dispatch' && inputs.force == 'true' }}"
          ON_FIX="${{ github.ref == 'refs/heads/fix' }}"
          CACHE_HIT="${{ steps.version_cache.outputs.cache-hit == 'true' }}"

          if [ "$FORCE" = "true" ]; then
            SHOULD="true"
            REASON="Force build via workflow_dispatch.input.force == true"
          elif [ "$ON_FIX" = "true" ]; then
            SHOULD="true"
            REASON="Branch is 'fix'"
          elif [ "$CACHE_HIT" = "true" ]; then
            SHOULD="false"
            REASON="Latest tag '${{ steps.version_info.outputs.latest_tag }}' already cached; no new upstream release"
          else
            SHOULD="true"
            REASON="Cache miss for latest tag '${{ steps.version_info.outputs.latest_tag }}'"
          fi

          echo "should_build=${SHOULD}" >> "$GITHUB_OUTPUT"
          echo "skip_reason=${REASON}" >> "$GITHUB_OUTPUT"

          {
            echo "### Build decision"
            echo "- should_build: **$SHOULD**"
            echo "- reason: $REASON"
            echo "- latest_tag: \`${{ steps.version_info.outputs.latest_tag }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

  build-aseprite:
    name: Build Aseprite (Windows)
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build == 'true' }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure 7-Zip
        shell: pwsh
        run: choco install 7zip -y

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Remove OpenSSL from PATH (optional)
        shell: pwsh
        run: |
          if (Test-Path "C:\Program Files\OpenSSL\") { Remove-Item -Recurse -Force "C:\Program Files\OpenSSL\" }

      # ---- Skia 缓存与下载（固定 m124；升级换 key 与 URL）----
      - name: Cache Skia
        id: skia-cache
        uses: actions/cache@v3
        with:
          path: skia
          key: skia-${{ runner.os }}-m124-08a5439a6b

      - name: Download Skia (when not cached)
        if: steps.skia-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $url = "https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-${{ runner.os }}-Release-x64.zip"
          curl.exe -L -o Skia-${{ runner.os }}-Release-x64.zip $url
          7z x Skia-${{ runner.os }}-Release-x64.zip -oskia

      # ---- 关键：用绝对路径写入 $GITHUB_ENV，避免 Convert-Path 相对路径问题 ----
      - name: Set SKIA env paths
        shell: pwsh
        run: |
          $skiaDir = Join-Path "${{ github.workspace }}" "skia"
          $skiaLibDir = Join-Path $skiaDir "out/Release-x64"
          $skiaLib = Join-Path $skiaLibDir "skia.lib"
          "SKIA_DIR=$skiaDir"        | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "SKIA_LIB_DIR=$skiaLibDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "SKIA_LIB=$skiaLib"        | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # ---- 下载 Aseprite 源码并确定源码根目录（zipball 顶层目录随机）----
      - name: Download Aseprite source
        shell: pwsh
        run: |
          $src = "${{ needs.check-version.outputs.source_url }}"
          curl.exe -L -o Aseprite-source.zip $src
          mkdir aseprite
          7z x Aseprite-source.zip -oaseprite
          $root = (Get-ChildItem aseprite | Where-Object { $_.PSIsContainer } | Select-Object -First 1).FullName
          "ASPR_ROOT=$root" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          mkdir "$root/build"

      # ---- 设置 VS 编译环境（跨步骤可用）----
      - name: Setup VS Dev Env (x64)
        uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          arch: x64

      # ---- CMake & Ninja 构建（使用绝对路径 env）----
      - name: Run CMake (Windows)
        shell: pwsh
        working-directory: ${{ env.ASPR_ROOT }}/build
        run: >
          cmake
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_IGNORE_PATH='C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/'
          -DLAF_BACKEND=skia
          -DSKIA_DIR="${{ env.SKIA_DIR }}"
          -DSKIA_LIBRARY_DIR="${{ env.SKIA_LIB_DIR }}"
          -DSKIA_LIBRARY="${{ env.SKIA_LIB }}"
          -G Ninja
          ..

      - name: Build (Ninja)
        shell: pwsh
        working-directory: ${{ env.ASPR_ROOT }}/build
        run: ninja aseprite

      - name: Prepare portable files
        shell: pwsh
        working-directory: ${{ env.ASPR_ROOT }}/build/bin
        run: |
          ' # This file is here so Aseprite behaves as a portable program' | Out-File -Encoding ascii -NoNewline aseprite.ini

      - name: Clean temp tools
        shell: bash
        working-directory: ${{ env.ASPR_ROOT }}/build/bin
        run: rm -f gen modp_b64_gen gen.exe gen.exe.manifest modp_b64_gen.exe modp_b64_gen.exe.manifest

      - name: Pack zip
        shell: pwsh
        working-directory: ${{ env.ASPR_ROOT }}/build/bin
        run: 7z a -tzip "Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows.zip" "*"

      - name: List output
        shell: pwsh
        working-directory: ${{ env.ASPR_ROOT }}/build/bin
        run: Get-ChildItem -Recurse -Force | Format-List

      - name: Upload artifact (run artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows
          path: ${{ env.ASPR_ROOT }}/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows.zip
          if-no-files-found: error
          retention-days: 7

  release:
    name: Publish Release
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows
          path: dist

      - name: Create/Update GitHub Release and upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.latest_tag }}
          name: Release Aseprite ${{ needs.check-version.outputs.latest_tag }}
          body: ${{ needs.check-version.outputs.version_body }}
          make_latest: true
          draft: false
          files: |
            dist/Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
