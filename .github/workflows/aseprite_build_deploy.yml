name: Build and deploy Aseprite

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # 每天 00:00 UTC
  push:
    branches:
      - master
      - fix

permissions:
  contents: write  # 允许创建/更新 Release

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      source_url: ${{ steps.version_info.outputs.source_url }}
      version_body: ${{ steps.version_info.outputs.version_body }}
      should_build: ${{ steps.should_build.outputs.should_build }}
    steps:
      - name: Get latest version info
        id: version_info
        shell: bash
        run: |
          set -euo pipefail
          data="$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)"
          LATEST_TAG="$(echo "$data" | jq -r '.tag_name')"
          # 拿源码 zip（zipball_url），避免抓到一堆资产 URL
          SOURCE_URL="$(echo "$data" | jq -r '.zipball_url')"
          VERSION_BODY="$(echo "$data" | jq -r '.body')"

          echo "${LATEST_TAG}" > "${LATEST_TAG}.txt"

          {
            echo "latest_tag=${LATEST_TAG}"
            echo "source_url=${SOURCE_URL}"
            echo "version_body<<EOF"
            echo "${VERSION_BODY}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Load version from cache
        id: version_check
        uses: actions/cache@v3
        with:
          path: ${{ steps.version_info.outputs.latest_tag }}.txt
          key: cached_version-${{ steps.version_info.outputs.latest_tag }}

      - name: Should we start new build?
        id: should_build
        if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/fix' || steps.version_check.outputs.cache-hit != 'true'
        run: echo "should_build=true" >> $GITHUB_OUTPUT

  build-aseprite:
    name: Build Aseprite (Windows)
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure 7-Zip (Windows)
        shell: pwsh
        run: choco install 7zip -y

      - name: Install Ninja (Windows)
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Remove OpenSSL from PATH (Windows)
        shell: pwsh
        run: |
          if (Test-Path "C:\Program Files\OpenSSL\") { Remove-Item -Recurse -Force "C:\Program Files\OpenSSL\" }

      - name: Cache Skia
        id: skia-cache
        uses: actions/cache@v3
        with:
          path: skia
          # 如需切换 Skia 版本，改这里的 key 即可
          key: skia-${{ runner.os }}-m124

      - name: Download Skia if not in cache
        if: steps.skia-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $url = "https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-${{ runner.os }}-Release-x64.zip"
          curl.exe -L -o Skia-${{ runner.os }}-Release-X64.zip $url
          7z x Skia-${{ runner.os }}-Release-X64.zip -oskia

      - name: Download Aseprite source
        shell: pwsh
        run: |
          $src = "${{ needs.check-version.outputs.source_url }}"
          curl.exe -L -o Aseprite-source.zip $src
          mkdir aseprite
          7z x Aseprite-source.zip -oaseprite
          # zipball 解压后会是未知目录名，取第一层目录为源码根
          $root = (Get-ChildItem aseprite | Where-Object { $_.PSIsContainer } | Select-Object -First 1).FullName
          echo "ASPR_ROOT=$root" >> $env:GITHUB_ENV
          mkdir "$root/build"

      - name: Setup VS Dev Env (x64)
        # 配置 VS 构建环境变量
        shell: cmd
        run: call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64

      - name: Run CMake (Windows)
        shell: pwsh
        working-directory: ${{ env.ASPR_ROOT }}/build
        run: >
          cmake
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_IGNORE_PATH='C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/'
          -DLAF_BACKEND=skia
          -DSKIA_DIR="$(Convert-Path ../../skia)"
          -DSKIA_LIBRARY_DIR="$(Convert-Path ../../skia/out/Release-x64)"
          -DSKIA_LIBRARY="$(Convert-Path ../../skia/out/Release-x64/skia.lib)"
          -G Ninja
          ..

      - name: Build (Ninja)
        shell: pwsh
        working-directory: ${{ env.ASPR_ROOT }}/build
        run: ninja aseprite

      - name: Prepare portable files
        shell: pwsh
        working-directory: ${{ env.ASPR_ROOT }}/build/bin
        run: |
          ' # This file is here so Aseprite behaves as a portable program' | Out-File -Encoding ascii -NoNewline aseprite.ini

      - name: Clean up temp binaries
        shell: bash
        working-directory: ${{ env.ASPR_ROOT }}/build/bin
        run: rm -f gen modp_b64_gen gen.exe gen.exe.manifest modp_b64_gen.exe modp_b64_gen.exe.manifest

      - name: Pack zip
        shell: pwsh
        working-directory: ${{ env.ASPR_ROOT }}/build/bin
        run: 7z a -tzip "Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows.zip" "*"

      - name: List output
        shell: pwsh
        working-directory: ${{ env.ASPR_ROOT }}/build/bin
        run: Get-ChildItem -Recurse -Force | Format-List

      - name: Upload artifact (run artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows
          path: ${{ env.ASPR_ROOT }}/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows.zip
          if-no-files-found: error
          retention-days: 7

  release:
    name: Publish Release
    needs: [check-version, build-aseprite]
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.should_build }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows
          path: dist

      - name: Create/Update GitHub Release and upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.latest_tag }}
          name: Release Aseprite ${{ needs.check-version.outputs.latest_tag }}
          body: ${{ needs.check-version.outputs.version_body }}
          make_latest: true
          draft: false
          files: |
            dist/Aseprite-${{ needs.check-version.outputs.latest_tag }}-Windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
